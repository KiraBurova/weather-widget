{"version":3,"sources":["components/Widget/Widget.module.scss","components/Settings/Settings.module.scss","components/AddLocation/AddLocation.module.scss","App.module.scss","components/LocationItem/LocationItem.module.scss","api/index.ts","utils/index.ts","store/store.ts","store/context.tsx","components/Widget/Stats/Stats.tsx","components/Widget/Widget.tsx","components/LocationItem/LocationItem.tsx","components/AddLocation/AddLocation.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx","components/Widget/Stats/Stats.module.scss"],"names":["module","exports","getWeatherIconByIconName","icon","getWeatherReportByCityName","cityName","axios","get","process","roundDegrees","degrees","Math","round","transformWeatherReportData","weatherReport","name","countryName","sys","country","weather","feelsLike","main","feels_like","temperature","temp","wind","humidity","visibility","pressure","clouds","all","createStore","loading","serverError","locations","weatherReports","setLoading","this","setServerError","error","fetchWeatherReportByLocation","latitude","longitude","getWeatherReportByLocation","then","response","data","setWeatherReports","location","id","uuidv4","addLocation","setLocationsToLocalStorage","catch","message","fetchWeatherReportByCityName","console","log","fetchAllWeatherReportsByCityName","promises","Promise","forEach","res","reorderWeatherReports","sort","a","b","findIndex","p","toLowerCase","push","setLocations","deleteLocation","filter","reorderLocations","list","startIndex","endIndex","result","Array","from","splice","removed","serializedLocations","JSON","stringify","localStorage","setItem","getLocationFromLocalStorage","storedLocations","getItem","parse","StoreContext","React","createContext","StoreProvider","children","store","useLocalObservable","Provider","value","useStore","useContext","Error","Stats","meters","className","styles","row","speed","WindIcon","PressureIcon","boldText","Widget","widget","widgetTop","place","map","w","src","alt","weatherDescriptionContainer","weatherDescription","description","LocationItem","observer","dragHandleProps","item","DragIcon","dragIcon","deleteIcon","onClick","role","DeleteIcon","AddLocation","useState","inputtedLocation","setInputtedLocation","formLabel","form","onSubmit","e","preventDefault","autoFocus","locationInput","onChange","target","type","addButton","disabled","AddIcon","Settings","handleToggleSettings","settings","settingsTop","CloseSettingsIcon","closeIcon","onDragEnd","destination","source","index","droppableId","provided","addedLocations","droppableProps","ref","innerRef","draggableId","draggableProps","style","marginBottom","placeholder","length","emptyPlaceholder","App","setError","settingsOpened","setSettingsOpened","useCallback","useEffect","navigator","geolocation","getCurrentPosition","position","coords","parsedLocations","Object","values","app","container","SettingsIcon","settingsIcon","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4f857db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"widget\":\"Widget_widget__16nWC\",\"widgetTop\":\"Widget_widgetTop__1QKOY\",\"settingsIcon\":\"Widget_settingsIcon__1qNME\",\"place\":\"Widget_place__3i_Xq\",\"temperature\":\"Widget_temperature__2z1dA\",\"weatherDescription\":\"Widget_weatherDescription__2_KiV\",\"wind\":\"Widget_wind__1ziyN\",\"pressure\":\"Widget_pressure__2Ke1F\",\"row\":\"Widget_row__1zs8w\",\"boldText\":\"Widget_boldText__2FTSb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__TQlU_\",\"settingsTop\":\"Settings_settingsTop__15DuA\",\"closeIcon\":\"Settings_closeIcon__1ybnQ\",\"addedLocations\":\"Settings_addedLocations__2jW7U\",\"emptyPlaceholder\":\"Settings_emptyPlaceholder__2iRUq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLabel\":\"AddLocation_formLabel__-uEro\",\"form\":\"AddLocation_form__1tXxt\",\"addButton\":\"AddLocation_addButton__201-N\",\"locationInput\":\"AddLocation_locationInput__2ebaA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"app\":\"App_app__2ziFi\",\"settingsIcon\":\"App_settingsIcon__1cVps\",\"error\":\"App_error__1LS0k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"LocationItem_item__2M2rr\",\"dragIcon\":\"LocationItem_dragIcon__AscEE\",\"deleteIcon\":\"LocationItem_deleteIcon__1vC8d\"};","import axios from 'axios';\nimport { TInitialWeatherReport } from '../types';\n\nexport const getWeatherReportByLocation = (latitude: number, longitude: number) => {\n  return axios.get<TInitialWeatherReport>(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_API_KEY}&units=metric`);\n};\n\nexport const getWeatherIconByIconName = (icon: string) => {\n  return `https://openweathermap.org/img/wn/${icon}@2x.png`;\n};\n\nexport const getWeatherReportByCityName = (cityName: string) => {\n  return axios.get<TInitialWeatherReport>(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}&units=metric`);\n};\n","import { TInitialWeatherReport, TWidgetData } from '../types';\n\nexport const transformMetersToKM = (meters: number) => {\n  return meters / 1000;\n};\n\nexport const roundDegrees = (degrees: number) => {\n  return Math.round(degrees);\n};\n\nexport const transformWeatherReportData = (weatherReport: TInitialWeatherReport): TWidgetData => {\n  return {\n    name: weatherReport.name,\n    countryName: weatherReport.sys.country,\n    weather: weatherReport.weather,\n    feelsLike: weatherReport.main.feels_like,\n    temperature: weatherReport.main.temp,\n    wind: weatherReport.wind,\n    humidity: weatherReport.main.humidity,\n    visibility: weatherReport.visibility,\n    pressure: weatherReport.main.pressure,\n    clouds: weatherReport.clouds.all,\n  };\n};\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { getWeatherReportByCityName, getWeatherReportByLocation } from '../api';\nimport { transformWeatherReportData } from '../utils';\n\nimport { TLocation, TWidgetData } from '../types';\n\nexport function createStore() {\n  return {\n    loading: false,\n    serverError: '',\n    locations: [] as TLocation[],\n    weatherReports: [] as TWidgetData[],\n    setLoading(loading: boolean) {\n      this.loading = loading;\n    },\n    setServerError(error: string) {\n      this.serverError = error;\n    },\n    fetchWeatherReportByLocation(latitude: number, longitude: number) {\n      this.setLoading(true);\n      getWeatherReportByLocation(latitude, longitude)\n        .then((response) => {\n          const weatherReports = transformWeatherReportData(response.data);\n          this.setWeatherReports(weatherReports);\n          const location = {\n            name: weatherReports.name,\n            id: uuidv4(),\n          };\n          this.addLocation(location);\n          this.setLocationsToLocalStorage();\n        })\n        .catch((error: Error) => this.setServerError(error.message))\n        .then(() => this.setLoading(false));\n    },\n    fetchWeatherReportByCityName(location: TLocation) {\n      this.setLoading(true);\n\n      getWeatherReportByCityName(location.name)\n        .then((response) => {\n          this.addLocation(location);\n          this.setLocationsToLocalStorage();\n          const weatherReports = transformWeatherReportData(response.data);\n          this.setWeatherReports(weatherReports);\n          console.log(weatherReports);\n        })\n        .catch((error: Error) => this.setServerError(error.message))\n        .then(() => this.setLoading(false));\n    },\n    fetchAllWeatherReportsByCityName(promises: any) {\n      this.setLoading(true);\n\n      Promise.all(promises)\n        .then((response) => {\n          response.forEach((res: any) => {\n            const location: any = {\n              name: res.data.name,\n              id: uuidv4(),\n            };\n            this.addLocation(location);\n            this.setLocationsToLocalStorage();\n            const weatherReports = transformWeatherReportData(res.data);\n            this.setWeatherReports(weatherReports);\n          });\n        })\n        .catch((error: Error) => this.setServerError(error.message))\n        .then(() => this.setLoading(false));\n    },\n    reorderWeatherReports() {\n      this.weatherReports = [...this.weatherReports].sort((a, b) => {\n        return this.locations.findIndex((p) => p.name.toLowerCase() === a.name.toLowerCase()) - this.locations.findIndex((p) => p.name.toLowerCase() === b.name.toLowerCase());\n      });\n    },\n    setWeatherReports(weatherReport: TWidgetData) {\n      this.weatherReports.push(weatherReport);\n    },\n    addLocation(location: TLocation) {\n      this.locations.push(location);\n    },\n    setLocations(locations: TLocation[]) {\n      this.locations = locations;\n    },\n    deleteLocation(name: string) {\n      this.locations = this.locations.filter((location) => location.name !== name);\n      this.weatherReports = this.weatherReports.filter((weatherReport) => weatherReport.name !== name);\n      this.setLocationsToLocalStorage();\n    },\n    reorderLocations(list: TLocation[], startIndex: number, endIndex: number) {\n      const result = Array.from(list);\n      const [removed] = result.splice(startIndex, 1);\n      result.splice(endIndex, 0, removed);\n      this.setLocations(result);\n      this.setLocationsToLocalStorage();\n      this.reorderWeatherReports();\n    },\n    setLocationsToLocalStorage() {\n      const serializedLocations = JSON.stringify(this.locations);\n\n      localStorage.setItem('locations', serializedLocations);\n    },\n    getLocationFromLocalStorage(): TLocation[] {\n      const storedLocations = localStorage.getItem('locations') || '{}';\n\n      return JSON.parse(storedLocations);\n    },\n  };\n}\nexport type TStore = ReturnType<typeof createStore>;\n","import { useLocalObservable } from 'mobx-react-lite';\nimport React from 'react';\n\nimport { createStore, TStore } from './store';\n\nconst StoreContext = React.createContext<TStore | null>(null);\n\ntype StoreProviderProps = {\n  children: React.ReactNode;\n};\n\nexport const StoreProvider = ({ children }: StoreProviderProps) => {\n  const store = useLocalObservable(createStore);\n  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;\n};\n\nexport const useStore = () => {\n  const store = React.useContext(StoreContext);\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider.');\n  }\n  return store;\n};\n","import React from 'react';\nimport { Icon } from '@iconify/react';\nimport PressureIcon from '@iconify/icons-ic/filter-tilt-shift';\nimport WindIcon from '@iconify/icons-ic/outline-near-me';\n\nimport { transformMetersToKM } from '../../../utils';\n\nimport styles from './Stats.module.scss';\n\nconst Stats = ({ weatherReport }: any) => {\n  return (\n    <div>\n      <div className={styles.row}>\n        {weatherReport.wind.speed && (\n          <span className={styles.wind} data-testid='wind'>\n            <Icon icon={WindIcon} />\n            {weatherReport.wind.speed}m/s\n          </span>\n        )}\n        {weatherReport.pressure && (\n          <span data-testid='pressure' className={styles.pressure}>\n            <Icon icon={PressureIcon} />\n            {weatherReport.pressure}hPa\n          </span>\n        )}\n      </div>\n      <div className={styles.row}>\n        {weatherReport.humidity && (\n          <span data-testid='humidity'>\n            Humidity: <span className={styles.boldText}>{weatherReport.humidity}%</span>\n          </span>\n        )}\n        {weatherReport.clouds && (\n          <span data-testid='cloudiness'>\n            Cloudiness: <span className={styles.boldText}>{weatherReport.clouds}%</span>\n          </span>\n        )}\n      </div>\n      {weatherReport.visibility && (\n        <span data-testid='visibility'>\n          Visibility: <span className={styles.boldText}>{transformMetersToKM(weatherReport.visibility)}km</span>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from 'react';\n\nimport { getWeatherIconByIconName } from '../../api';\nimport { roundDegrees } from '../../utils';\n\nimport Stats from './Stats';\n\nimport { WidgetProps } from './types';\nimport styles from './Widget.module.scss';\n\nconst Widget = ({ weatherReport }: WidgetProps) => {\n  return (\n    <div className={styles.widget}>\n      <div className={styles.widgetTop}>\n        {weatherReport.name && (\n          <span className={styles.place} data-testid='place'>\n            {weatherReport.name}, {weatherReport.countryName}\n          </span>\n        )}\n      </div>\n      <div className={styles.temperature} data-testid='temperature'>\n        {weatherReport.weather.map((w) => (\n          <img src={getWeatherIconByIconName(w.icon)} key={w.id} alt='Weather icon' />\n        ))}\n        <span>{roundDegrees(weatherReport.temperature)}&deg;C</span>\n      </div>\n      <p className={styles.weatherDescriptionContainer} data-testid='description'>\n        <span>Feels like {roundDegrees(weatherReport.feelsLike)}&deg;C.</span>\n        <span className={styles.weatherDescription}>{weatherReport.weather.map((w) => w.description)}.</span>\n      </p>\n      <Stats weatherReport={weatherReport} />\n    </div>\n  );\n};\n\nexport default Widget;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Icon } from '@iconify/react';\nimport DragIcon from '@iconify/icons-ic/outline-drag-handle';\nimport DeleteIcon from '@iconify/icons-ic/outline-delete-outline';\n\nimport { useStore } from '../../store/context';\n\nimport { LocationItemProps } from './types';\nimport styles from './LocationItem.module.scss';\n\nconst LocationItem = observer(({ location, dragHandleProps }: LocationItemProps) => {\n  const store = useStore();\n  const { deleteLocation } = store;\n\n  const handleDeleteLocation = (name: string) => () => {\n    deleteLocation(name);\n  };\n\n  return (\n    <div className={styles.item}>\n      <div {...dragHandleProps}>\n        <Icon icon={DragIcon} className={styles.dragIcon} />\n      </div>\n      {location.name}\n      <span className={styles.deleteIcon} onClick={handleDeleteLocation(location.name)} role='button'>\n        <Icon icon={DeleteIcon} />\n      </span>\n    </div>\n  );\n});\n\nexport default LocationItem;\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Icon } from '@iconify/react';\nimport AddIcon from '@iconify/icons-ic/outline-subdirectory-arrow-left';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { useStore } from '../../store/context';\n\nimport { TLocation } from '../../types';\nimport styles from './AddLocation.module.scss';\n\nconst AddLocation = observer(() => {\n  const store = useStore();\n  const { fetchWeatherReportByCityName } = store;\n\n  const [inputtedLocation, setInputtedLocation] = useState('');\n\n  const handleChangeLocation = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setInputtedLocation(value);\n  };\n\n  const handleSubmitLocation = (e: React.FormEvent) => {\n    e.preventDefault();\n    const location: TLocation = {\n      name: inputtedLocation,\n      id: uuidv4(),\n    };\n    fetchWeatherReportByCityName(location);\n    setInputtedLocation('');\n  };\n\n  return (\n    <div>\n      <span className={styles.formLabel}>Add location:</span>\n      <form className={styles.form} onSubmit={handleSubmitLocation} data-testid='form'>\n        <input autoFocus className={styles.locationInput} value={inputtedLocation} onChange={handleChangeLocation} />\n        <button type='submit' className={styles.addButton} disabled={!inputtedLocation}>\n          <Icon icon={AddIcon} />\n        </button>\n      </form>\n    </div>\n  );\n});\n\nexport default AddLocation;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport { Icon } from '@iconify/react';\nimport CloseSettingsIcon from '@iconify/icons-ic/close';\n\nimport { useStore } from '../../store/context';\n\nimport LocationItem from '../LocationItem';\nimport AddLocation from '../AddLocation';\n\nimport { SettingsProps } from './types';\nimport styles from './Settings.module.scss';\n\nconst Settings = observer(({ handleToggleSettings }: SettingsProps) => {\n  const store = useStore();\n  const { locations, reorderLocations } = store;\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    reorderLocations(locations, result.source.index, result.destination.index);\n  };\n\n  return (\n    <div className={styles.settings}>\n      <div className={styles.settingsTop}>\n        <span>Settings</span>\n        <div onClick={handleToggleSettings}>\n          <Icon icon={CloseSettingsIcon} className={styles.closeIcon} />\n        </div>\n      </div>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId='droppable'>\n          {(provided) => (\n            <div className={styles.addedLocations} {...provided.droppableProps} ref={provided.innerRef}>\n              {locations.map((location, index) => (\n                <Draggable key={location.id} draggableId={location.name} index={index}>\n                  {(provided) => (\n                    <div ref={provided.innerRef} {...provided.draggableProps} style={{ ...provided.draggableProps.style, marginBottom: '5px' }}>\n                      <LocationItem dragHandleProps={provided.dragHandleProps} location={location}></LocationItem>\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n      {!locations.length && <div className={styles.emptyPlaceholder}>No settings yet.</div>}\n      <AddLocation />\n    </div>\n  );\n});\n\nexport default Settings;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Icon } from '@iconify/react';\nimport SettingsIcon from '@iconify/icons-ic/outline-settings';\n\nimport { useStore } from './store/context';\nimport { getWeatherReportByCityName } from './api';\n\nimport MainWidget from './components/Widget';\nimport Settings from './components/Settings';\n\nimport { TLocation, TWidgetData } from './types';\nimport styles from './App.module.scss';\n\nconst App = observer(() => {\n  const store = useStore();\n  const { loading, serverError, weatherReports, getLocationFromLocalStorage, fetchWeatherReportByLocation, fetchAllWeatherReportsByCityName } = store;\n  const [error, setError] = useState('');\n  const [settingsOpened, setSettingsOpened] = useState(false);\n\n  const handleToggleSettings = useCallback(() => {\n    setSettingsOpened(!settingsOpened);\n  }, [settingsOpened]);\n\n  useEffect(() => {\n    const handleGetCurrentLocation = () => {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          const parsedLocations = getLocationFromLocalStorage();\n          const promises: any = [];\n\n          if (Object.values(parsedLocations).length) {\n            Object.values(parsedLocations as TLocation[]).forEach((location) => {\n              promises.push(getWeatherReportByCityName(location.name));\n            });\n            fetchAllWeatherReportsByCityName(promises);\n          } else {\n            fetchWeatherReportByLocation(latitude, longitude);\n          }\n        },\n        (error) => setError(error.message),\n      );\n    };\n\n    const handleCheckIfGeoLocationIsAvailable = () => {\n      if ('geolocation' in navigator) {\n        handleGetCurrentLocation();\n      } else {\n        setError('Geolocation is not available');\n      }\n    };\n\n    handleCheckIfGeoLocationIsAvailable();\n  }, [fetchWeatherReportByLocation, fetchAllWeatherReportsByCityName, getLocationFromLocalStorage]);\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.container}>\n        {settingsOpened ? (\n          <Settings handleToggleSettings={handleToggleSettings} />\n        ) : (\n          <>\n            {!!weatherReports.length && (\n              <div>\n                <div>\n                  {weatherReports.map((weatherReport: TWidgetData) => (\n                    <MainWidget key={weatherReport.name} weatherReport={weatherReport} handleToggleSettings={handleToggleSettings} />\n                  ))}\n                </div>\n                <div onClick={handleToggleSettings} role='button'>\n                  <Icon icon={SettingsIcon} className={styles.settingsIcon} />\n                </div>\n              </div>\n            )}\n          </>\n        )}\n        {(error || serverError) && (\n          <span className={styles.error} data-testid='error'>\n            {error || serverError}\n          </span>\n        )}\n        {loading && <span>Loading...</span>}\n      </div>\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nimport { StoreProvider } from './store/context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wind\":\"Stats_wind__1S3td\",\"pressure\":\"Stats_pressure__3uGLM\",\"row\":\"Stats_row__nyU4p\",\"boldText\":\"Stats_boldText__1x1uB\"};"],"sourceRoot":""}